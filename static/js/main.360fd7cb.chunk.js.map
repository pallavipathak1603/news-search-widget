{"version":3,"sources":["search-widget/SearchResultComponent.js","search-widget/SearchComponent.js","App.js","serviceWorker.js","index.js"],"names":["SearchResultComponent","handleClickCard","window","open","props","url","className","onClick","this","src","urlToImage","alt","author","title","description","Component","API_KEY","API_URL","SearchComponent","componentDidMount","query","handleUrlQueryParam","self","articleList","document","getElementById","addEventListener","state","articles","length","totalResults","scrollTop","clientHeight","scrollHeight","page","setState","refreshResult","setTimer","timer","loadMore","queryPrefix","queryParam","axios","get","then","data","console","log","push","clearInterval","intervalID","timerID","setInterval","handleOnChange","ev","target","value","fetchedArticles","result","id","type","placeholder","onChange","map","res","key","queryString","require","App","queryParamInUrl","parsed","parseUrl","location","href","undefined","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.360fd7cb.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass SearchResultComponent extends Component{\n\n    handleClickCard  = () => {\n        window.open(this.props.url, \"_blank\")\n    }\n    render(){\n        return(\n              <div className=\"card\" onClick={this.handleClickCard}>\n                <img className=\"image\" src={this.props.urlToImage} alt=\"react logo\"></img>\n                <div className=\"card-body\">\n                        <ul className=\"card-list\">\n                                <li><span className=\"card-item-key\">Author: </span><span>{this.props.author}</span></li>\n                                <li><span className=\"card-item-key\">Title: </span><span>{this.props.title}</span></li>\n                                <li><span className=\"card-item-key\">Description: </span><span>{this.props.description}</span></li>\n                        </ul>    \n                </div>\n           </div>\n        )}  \n}\nexport default SearchResultComponent","import React,{Component} from 'react';\nimport SearchResultComponent from './SearchResultComponent'\nimport axios from 'axios';\n\nimport '../App.css';\n\n\nconst  API_KEY  = \"363d26dd3d664d199ca63adc371e22aa\"\nconst API_URL = 'https://newsapi.org/v2/everything'\n\n\nclass SearchComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            totalResults:null,\n            page:1,\n            fetchedArticles: 0,\n            articles:[],\n            queryParam:\"\",\n            timer:30\n        }\n    }\n\n    componentDidMount = () => {\n        if(this.props.query){\n            this.handleUrlQueryParam()\n        }\n        let self = this;\n        let articleList = document.getElementById(\"articles\") \n        articleList.addEventListener('scroll', function() {\n            if (self.state.articles.length < self.state.totalResults && articleList.scrollTop + articleList.clientHeight >= articleList.scrollHeight) {\n                let page = self.state.page + 1;\n                self.setState({\n                    page: page\n                })\n                self.refreshResult(true);\n            }\n        });\n    }\n    setTimer = () => {\n        let timer = this.state.timer -1;\n        this.setState({\n            timer:timer\n        })\n    }\n    refreshResult = (loadMore) => {\n        let queryPrefix = this.state.queryParam;\n        if(queryPrefix.length >= 3){\n            axios.get(`${API_URL}?q=${queryPrefix}&apiKey=${API_KEY}&pageSize=${10}&page=${this.state.page}`)\n            .then(({ data }) => {\n                console.log(data)\n                if(loadMore) {\n                    let articles = this.state.articles;\n                    articles.push(...data.articles);\n                    this.setState({\n                        articles: articles,\n                        timer: 30,\n                    })\n                } else {\n                    this.setState({\n                        page:1,\n                        totalResults: data.totalResults,\n                        articles: data.articles,\n                        timer: 30,\n                    })\n                }\n                clearInterval(this.intervalID);\n                // console.log(\"clearing refresh interval!! \" + this.intervalID);\n\n                clearInterval(this.timerID);\n                // console.log(\"clearing timer interval!! \" + this.intervalID);\n\n                this.intervalID = setInterval(this.refreshResult, 30000)\n                this.timerID = setInterval(this.setTimer,1000)\n                // console.log(\"setting refresh and timer interval \" + this.intervalID)\n            })\n        }else{\n            this.setState({\n                page:1,\n                totalResults:null,\n                articles:[]\n            })\n            clearInterval(this.timerID);\n            clearInterval(this.intervalID)\n            // console.log(\"clearing both intervals!! \" + this.intervalID + \" \" + this.timerID);\n        }\n    }\n\n    handleOnChange =(ev) =>{\n        let queryParam = ev.target.value;\n        this.setState({\n            page:1,\n            queryParam: queryParam,\n        },()=>{\n            this.refreshResult(false);\n        })\n    }\n\n    handleUrlQueryParam = () => {\n        if(this.props.query.length >= 3){\n            this.setState({\n                page:1,\n                queryParam: this.props.query,\n            },()=>{\n                this.refreshResult(false);\n            })\n        }\n    }\n\n    render(){\n        const result = this.state.articles;\n        \n        return(\n            <div id=\"search-page\">\n                <div className=\"searchbar\"> {this.state.articles.length > 0 && <span id=\"timer\">Auto refreshing in: {this.state.timer}</span>}\n                    <input className=\"search-input\" type=\"text\" placeholder=\"Type something to search ..\" onChange={this.handleOnChange}/>\n                </div>\n                <div id=\"articles\">\n                    {\n                        result.length > 0 &&\n                        result.map((res,key) => {\n                        return <SearchResultComponent key={key}\n                        author={res.author}\n                        title={res.title}\n                        description={res.description}\n                        urlToImage={res.urlToImage}\n                        url={res.url}\n                        />\n                        })\n                    }\n                </div>               \n            </div>   \n    )}\n}\n  \nexport default SearchComponent;\n","import React from 'react';\nimport './App.css';\nimport SearchComponent from './search-widget/SearchComponent';\nconst queryString = require('query-string');\n\nfunction App() {\n  let queryParamInUrl = null;\n  const parsed = queryString.parseUrl(window.location.href);\n  console.log(parsed)\n  if(parsed.query && parsed.query.query !== undefined){\n      queryParamInUrl = parsed.query.query;\n  }\n  return (\n    \n    <div className=\"App\">\n     \n       <SearchComponent\n        query={queryParamInUrl}\n       />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}